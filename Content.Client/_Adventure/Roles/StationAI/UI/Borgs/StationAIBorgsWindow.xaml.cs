using System.Linq;
using System.Text;
using Content.Client.UserInterface.Controls;
using Content.Shared.AdventureSpace.Roles.StationAI.UI;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;

namespace Content.Client.AdventurePrivate._Alteros.Roles.StationAI.UI.Borgs;

[GenerateTypedNameReferences]
public sealed partial class StationAIBorgsWindow : FancyWindow
{
    private StationAIBorgInterfaceState? _actualState = null;

    public StationAIBorgsWindow()
    {
        RobustXamlLoader.Load(this);

        Refresh.OnPressed += _ => TryUpdateBorgList?.Invoke();
        // ButtonSyncLaws.OnPressed += _ =>
        // {
        //     var borg = GetSelectedBorg();
        //     if (borg != null)
        //     {
        //         SyncLaws?.Invoke(borg.Value);
        //     }
        // };
        ButtonUseCamera.OnPressed += _ =>
        {
            var borg = GetSelectedBorg();
            if (borg != null)
                UseCamera?.Invoke(borg.Value);
        };
        BackToBody.OnPressed += _ =>
        {
            BackToBodyEvent?.Invoke();
        };
        SubnetList.OnItemSelected += ItemSelected;

        ChargeBar.MaxValue = 1f;
        ChargeBar.MinValue = 0f;
    }

    public event Action<NetEntity>? SyncLaws;

    public event Action<NetEntity>? UseCamera;

    public event Action? BackToBodyEvent;

    public event Action? TryUpdateBorgList;

    private NetEntity? GetSelectedBorg()
    {
        var selectedItem = SubnetList.GetSelected().FirstOrDefault();
        if (selectedItem?.Metadata is not StationAIBorgUIModel borgState)
            return null;

        return borgState.Borg;
    }

    private void ItemSelected(ItemList.ItemListSelectedEventArgs obj)
    {
        var meta = obj.ItemList[obj.ItemIndex].Metadata;
        if (meta is not StationAIBorgUIModel borg)
            return;

        BorgName.Text = borg.Name;
        BorgCoordinates.Text = borg.Coordinates;
        ChargeLabel.Text = $"Заряд: {borg.Percent * 100f}%";
        ChargeBar.Value = borg.Percent;

        var laws = new StringBuilder();
        foreach (var law in borg.Laws.Laws)
        {
            laws.Append(law.Order)
                .Append(": ")
                .Append(Loc.GetString(law.LawString))
                .AppendLine();
        }

        BorgLaws.SetMessage(FormattedMessage.FromMarkup(laws.ToString()));
        BorgInfoContainer.Visible = true;
    }

    public void UpdateBorgs(StationAIBorgInterfaceState state)
    {
        if (IsSameState(state))
            return;

        _actualState = state;

        SubnetList.Clear();

        if (state.Borgs.Count == 0)
        {
            Text.Visible = true;
            BorgInfoContainer.Visible = false;
            return;
        }

        Text.Visible = false;
        BorgInfoContainer.Visible = false;

        foreach (var borg in state.Borgs)
        {
            ItemList.Item camera = new(SubnetList)
            {
                Metadata = borg,
                Text = borg.Name,
            };

            SubnetList.Add(camera);
        }
    }

    public bool IsSameState(StationAIBorgInterfaceState state)
    {
        if (_actualState == null)
            return false;

        if (state.Borgs.Count != _actualState?.Borgs.Count)
            return false;

        foreach (var (borg, index) in state.Borgs.WithIndex())
        {
            if (!_actualState.Borgs.TryGetValue(index, out var oldBorg))
                return false;

            if (!oldBorg.Equals(borg))
                return false;
        }

        return true;
    }
}
