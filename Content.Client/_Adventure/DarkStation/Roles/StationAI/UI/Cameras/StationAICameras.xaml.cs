using Content.Client.Pinpointer.UI;
using Content.Client.UserInterface.Controls;
using Content.Shared.AdventureSpace.Roles.StationAI.UI;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;

namespace Content.Client.AdventureSpace.Roles.StationAI.UI.Cameras;

[GenerateTypedNameReferences]
public sealed partial class StationAICameras : FancyWindow
{
    private readonly Texture? _blipTexture;
    [Dependency] private readonly IEntityManager _entManager = default!;

    private List<StationAICameraUIModel> _cameras = new();

    public StationAICameras(EntityUid? mapUid)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        var textureSprite = new SpriteSpecifier.Texture(new ResPath("/Textures/Interface/NavMap/beveled_circle.png"));
        _blipTexture = _entManager.System<SpriteSystem>().Frame0(textureSprite);

        if (!_entManager.TryGetComponent<TransformComponent>(mapUid, out var xform))
        {
            Close();
            return;
        }

        NavMap.MapUid = xform.GridUid;
        NavMap.TrackedEntitySelectedAction += camera =>
        {
            if (camera != null)
                WarpToCamera?.Invoke(camera.Value);
        };

        Refresh.OnPressed += _ => UpdateCameraList();
        BackToBody.OnPressed += _ => BackToBodyAction?.Invoke();
    }

    public event Action? TryUpdateCameraList;
    public event Action? BackToBodyAction;
    public event Action<NetEntity>? WarpToCamera;

    private void FillCameraList()
    {
        if (!NavMap.Visible || _blipTexture == null)
            return;

        NavMap.TrackedCoordinates.Clear();
        NavMap.TrackedEntities.Clear();

        foreach (var entry in _cameras)
        {
            var coordinates = _entManager.GetCoordinates(entry.Coordinates);
            NavMap.TrackedEntities.TryAdd(
                entry.Camera,
                new NavMapBlip(
                    coordinates,
                    _blipTexture,
                    entry.Available ? Color.Green : Color.Red,
                    false,
                    entry.Available
                )
            );
        }
    }

    public void UpdateCameraList(List<StationAICameraUIModel>? cameras = null)
    {
        if (cameras == null)
        {
            TryUpdateCameraList?.Invoke();
            return;
        }

        _cameras = cameras;
        FillCameraList();
    }
}
