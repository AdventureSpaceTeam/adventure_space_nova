using Content.Client.UserInterface.Controls;
using Content.Shared.AdventureSpace.Roles.CCO;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;
using SecretCCVars = Content.Shared.AdventureSpace.CCVars.SecretCCVars;

namespace Content.Client.AdventureSpace.Roles.CCO.Console;

[GenerateTypedNameReferences]
public sealed partial class CcoConsoleWindow : FancyWindow
{
    private readonly CcoConsoleBoundInterface _bui;
    [Dependency] private readonly IConfigurationManager _cfg = default!;
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;

    private readonly SpriteSystem _spriteSystem;
    private CcoConsoleUIState? _state;

    public CcoConsoleWindow(CcoConsoleBoundInterface bui)
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);
        _bui = bui;

        AnnounceButton.OnPressed += _ => _bui.SendAnnouncement(Rope.Collapse(MessageInput.TextRope));
        StationOpenManifest.OnPressed += _ => _bui.OpenManifest();
        MessageInput.OnKeyBindUp += AnnouncementOnOnTextChanged;
        StationsSelector.OnItemSelected += ItemSelected;

        _spriteSystem = _entityManager.System<SpriteSystem>();
        SetupSalaries();
        SetupEmergencyShuttle();
    }

    private void ItemSelected(OptionButton.ItemSelectedEventArgs obj)
    {
        var netEntity = new NetEntity(obj.Id);
        _bui.OnStationSelected(netEntity);
    }

    private void AnnouncementOnOnTextChanged(GUIBoundKeyEventArgs args)
    {
        AnnounceButton.Disabled = Rope.Collapse(MessageInput.TextRope).TrimStart() == "";
    }

    public void UpdateState(CcoConsoleUIState state)
    {
        _state = state;

        if (state.ConsoleBase.SelectedStation is not { } selectedStation)
        {
            BindStationNotSelected();
            BindAvailableStations(state.Stations);
            return;
        }

        BindAvailableStations(state.Stations, selectedStation);
        BindCcoConsoleBase(state.ConsoleBase);
        BindSelectedStation(state.Stations.AvailableStation[selectedStation]);

        CTabContainer.SetTabTitle(0, "Статус");
        CTabContainer.SetTabTitle(1, "Объявления");
        CTabContainer.SetTabTitle(2, "Спец.отряды");
        CTabContainer.SetTabTitle(3, "Зарплаты");

        CTabContainer.SetTabVisible(3, _cfg.GetCVar(SecretCCVars.EconomyEnabled));
    }

    private void BindStationNotSelected()
    {
        CTabContainer.Visible = false;
    }

    private void BindAvailableStations(CcoConsoleAvailableStations stations, NetEntity? selected = null)
    {
        StationsSelector.Clear();

        foreach (var (key, value) in stations.AvailableStation)
        {
            StationsSelector.AddItem(value.StationName, key.Id);
            if (key == selected)
                StationsSelector.SelectId(key.Id);
        }
    }

    private void BindSelectedStation(CcoConsoleStationState stationState)
    {
        CTabContainer.Visible = true;

        BindStationAlert(stationState.AlertState);
        BindEmergencyShuttle(stationState.EmergencyShuttle);
        BindSpecialSquads(stationState.Squads);
        BindSalaries(stationState.Salaries);
    }

    private void BindSpecialSquads(CcoConsoleSpecialSquadModel squads)
    {
        SpecialSquadContainer.DisposeAllChildren();
        SpecialSquadContainer.RemoveAllChildren();

        foreach (var squad in squads.Squads)
        {
            var control = new CcoConsoleSquadControl(_bui,
                squad.Id,
                squad.Name,
                squad.Description,
                squads.WasCalled
            );
            SpecialSquadContainer.AddChild(control);
        }
    }

    private void BindCcoConsoleBase(CcoConsoleBase consoleBase)
    {
        if (FormattedMessage.TryFromMarkup(consoleBase.OperatorName, out var message))
            CCOOperator.SetMessage(message);
        else
            CCOOperator.SetMessage(consoleBase.OperatorName);
    }

    private void BindStationAlert(CcoConsoleAlert alert)
    {
        if (FormattedMessage.TryFromMarkup(alert.AlertName, out var alertMessage))
            StationAlertCode.SetMessage(alertMessage, defaultColor: alert.AlertColor);
        else
            StationAlertCode.SetMessage(alert.AlertName, defaultColor: alert.AlertColor);

        if (FormattedMessage.TryFromMarkup(alert.AlertDescription, out var alertDescription))
            StationAlertCodeDescription.SetMessage(alertDescription);
        else
            StationAlertCodeDescription.SetMessage(alert.AlertDescription);
    }
}
