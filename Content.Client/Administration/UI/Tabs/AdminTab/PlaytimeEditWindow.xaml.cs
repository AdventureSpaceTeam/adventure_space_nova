using System.Linq;
using Content.Shared.Administration;
using Content.Shared.Roles;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.GameObjects;
using Robust.Shared.IoC;
using Robust.Shared.Localization;
using System;

namespace Content.Client.Administration.UI.Tabs.AdminTab;

[GenerateTypedNameReferences]
public sealed partial class PlaytimeEditWindow : DefaultWindow
{
    [Dependency] private readonly IPrototypeManager _prototype = default!;

    private readonly List<ProtoId<JobPrototype>> _jobPrototypeIds = new();
    private ProtoId<JobPrototype>? _currentJob = null;
    private string _timeAdding = string.Empty;
    private string _playerCKey = string.Empty;
    private ProtoId<DepartmentPrototype>? _currentDep = null;
    private readonly List<ProtoId<DepartmentPrototype>> _depPrototypeNames = new();

    public PlaytimeEditWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        var jobs = _prototype.EnumeratePrototypes<JobPrototype>().ToList();
        var deps = _prototype.EnumeratePrototypes<DepartmentPrototype>().ToList();
        jobs.Sort((x, y) => string.Compare(x.LocalizedName, y.LocalizedName, StringComparison.CurrentCulture));
        deps.Sort((x, y) => string.Compare(x.Name, y.Name, StringComparison.CurrentCulture));

        foreach (var job in jobs)
        {
            if (!job.OverrideConsoleVisibility.GetValueOrDefault(job.SetPreference))
                continue;

            _jobPrototypeIds.Add(job.ID);
            RolesTypeButton.AddItem(Loc.GetString(job.Name), _jobPrototypeIds.Count - 1);
        }
        foreach (var dep in deps)
        {
            _depPrototypeNames.Add(dep.ID);
            RolesTypeButton.AddItem(Loc.GetString(dep.Name), _jobPrototypeIds.Count - 1);
        }

        RolesTypeButton.OnItemSelected += SelectJobPreset;
        TimeLineEdit.OnTextChanged += SelectTime;
        PlayerList.OnSelectionChanged += OnPlayerSelectionChanged;
        DepTypeButton.OnItemSelected += SelectDepPreset;
        UpdateCommands();
    }

    private void SelectJobPreset(OptionButton.ItemSelectedEventArgs args)
    {
        _currentJob = null;
        if (_prototype.TryIndex<JobPrototype>(_jobPrototypeIds[args.Id], out var job))
            _currentJob = job.ID;
        args.Button.SelectId(args.Id);
        UpdateCommands();
    }

    private void SelectDepPreset(OptionButton.ItemSelectedEventArgs args)
    {
        _currentDep = null;
        if (_prototype.TryIndex<DepartmentPrototype>(_depPrototypeNames[args.Id], out var dep))
            _currentDep = dep.ID;
        args.Button.SelectId(args.Id);
        UpdateCommands();
    }

    private void SelectTime(LineEdit.LineEditEventArgs obj)
    {
        _timeAdding = obj.Text;
        UpdateCommands();
    }

    private void OnPlayerSelectionChanged(PlayerInfo? player)
    {
        _playerCKey = player?.Username ?? string.Empty;
        UpdateCommands();
    }

    private void UpdateCommands()
    {
        PlaytimeAdd.Command = $"playtime_addrole {_playerCKey} {_currentJob} {_timeAdding}";
        PlaytimeAddOverall.Command = $"playtime_addoverall {_playerCKey} {_timeAdding}";
        PlaytimeAddDepartment.Command = $"playtime_addoverall {_playerCKey} {_currentDep} {_timeAdding}";
        var disabled_all = _timeAdding == string.Empty || _playerCKey == string.Empty;
        var disabled_role = _timeAdding == string.Empty || _playerCKey == string.Empty || _currentJob == null;
        var disabled_dep = _timeAdding == string.Empty || _playerCKey == string.Empty || _depPrototypeNames == null;
        PlaytimeAdd.Disabled = disabled_role;
        PlaytimeAddOverall.Disabled = disabled_all;
        PlaytimeAddDepartment.Disabled = disabled_dep;
    }
}
