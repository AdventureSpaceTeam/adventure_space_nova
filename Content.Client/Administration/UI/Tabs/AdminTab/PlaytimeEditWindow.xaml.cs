using System.Linq;
using Content.Shared.Administration;
using Content.Shared.Roles;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.GameObjects;
using Robust.Shared.IoC;
using Robust.Shared.Localization;
using System;

namespace Content.Client.Administration.UI.Tabs.AdminTab
{
    [GenerateTypedNameReferences]
    public sealed partial class PlaytimeEditWindow : DefaultWindow
    {
        [Dependency] private readonly IPrototypeManager _prototypeManager = default!;

        private readonly List<string> _jobPrototypeIds = new();
        private ProtoId<JobPrototype> _currentJob = "";
        private string? _timeAdding = null;
        private string? _playerCKey = null;
        public PlaytimeEditWindow()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            var jobs = _prototypeManager.EnumeratePrototypes<JobPrototype>().ToList();
            jobs.Sort((x, y) => string.Compare(x.LocalizedName, y.LocalizedName, StringComparison.CurrentCulture));

            foreach (var job in jobs)
            {
                if (!job.OverrideConsoleVisibility.GetValueOrDefault(job.SetPreference))
                {
                    continue;
                }

                _jobPrototypeIds.Add(job.ID);
                _rolesTypeButton.AddItem(Loc.GetString(job.Name), _jobPrototypeIds.Count - 1);
            }

            _rolesTypeButton.OnItemSelected += SelectJobPreset;
            _timeLineEdit.OnTextChanged += SelectTime;
            PlayerList.OnSelectionChanged += OnPlayerSelectionChanged;

            _playtime_add.Disabled = _timeAdding == null || _playerCKey == null || _currentJob == "";

            _playtime_addoverall.Disabled = _timeAdding == null || _playerCKey == null || _currentJob == "";

            _playtime_adddepartment.Disabled = _timeAdding == null || _playerCKey == null || _currentJob == "";

            _playtime_add.Command = $"playtime_addrole {_playerCKey} {_currentJob} {_timeAdding}";

            _playtime_addoverall.Command = $"playtime_addoverall {_playerCKey} {_timeAdding}";

            if (_currentJob != ""){
                _prototypeManager.TryIndex<JobPrototype>(_currentJob, out var _job);
                if (_job != null && _job.Guides != null)
                {
                    foreach (var dep in _job.Guides)
                    {
                        _playtime_adddepartment.Command = $"playtime_adddepartment {_playerCKey} {dep} {_timeAdding}";
                    }
                } 
            }
            
        }

        private void SelectJobPreset(OptionButton.ItemSelectedEventArgs args)
        {
            if (!_prototypeManager.TryIndex(_jobPrototypeIds[args.Id], out JobPrototype? job))
            {
                return;
            }
            _currentJob = job.ID;
        }

        private void SelectTime(LineEdit.LineEditEventArgs obj)
        {
            _timeAdding += obj.Text;
        }

        private void OnPlayerSelectionChanged(PlayerInfo? player)
        {
            _playerCKey = player?.Username ?? string.Empty;
        }
    }
}
