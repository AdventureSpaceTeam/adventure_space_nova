using System.Linq;
using Content.Shared.Administration;
using Content.Shared.Roles;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.GameObjects;
using Robust.Shared.IoC;
using Robust.Shared.Localization;
using System;

namespace Content.Client.Administration.UI.Tabs.AdminTab;

[GenerateTypedNameReferences]
public sealed partial class PlaytimeEditWindow : DefaultWindow
{
    [Dependency] private readonly IPrototypeManager _prototype = default!;

    private readonly List<ProtoId<JobPrototype>> _jobPrototypeIds = new();
    private ProtoId<JobPrototype>? _currentJob = null;
    private string _timeAdding = string.Empty;
    private string _playerCKey = string.Empty;

    public PlaytimeEditWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        var jobs = _prototype.EnumeratePrototypes<JobPrototype>().ToList();
        jobs.Sort((x, y) => string.Compare(x.LocalizedName, y.LocalizedName, StringComparison.CurrentCulture));

        foreach (var job in jobs)
        {
            if (!job.OverrideConsoleVisibility.GetValueOrDefault(job.SetPreference))
                continue;

            _jobPrototypeIds.Add(job.ID);
            RolesTypeButton.AddItem(Loc.GetString(job.Name), _jobPrototypeIds.Count - 1);
        }

        RolesTypeButton.OnItemSelected += SelectJobPreset;
        TimeLineEdit.OnTextChanged += SelectTime;
        PlayerList.OnSelectionChanged += OnPlayerSelectionChanged;
        UpdateCommands();
    }

    private void SelectJobPreset(OptionButton.ItemSelectedEventArgs args)
    {
        _currentJob = null;
        if (_prototype.TryIndex<JobPrototype>(_jobPrototypeIds[args.Id], out var job))
            _currentJob = job.ID;
        args.Button.SelectId(args.Id);
        UpdateCommands();
    }

    private void SelectTime(LineEdit.LineEditEventArgs obj)
    {
        _timeAdding = obj.Text;
        UpdateCommands();
    }

    private void OnPlayerSelectionChanged(PlayerInfo? player)
    {
        _playerCKey = player?.Username ?? string.Empty;
        UpdateCommands();
    }

    private void UpdateCommands()
    {
        PlaytimeAdd.Command = $"playtime_addrole {_playerCKey} {_currentJob} {_timeAdding}";
        PlaytimeAddOverall.Command = $"playtime_addoverall {_playerCKey} {_timeAdding}";
        if (_prototype.TryIndex<JobPrototype>(_currentJob, out var job)
            && job.Guides != null && job.Guides.Count > 0)
        {
            var dep = job.Guides[0];
            PlaytimeAddDepartment.Command = $"playtime_adddepartment {_playerCKey} {dep} {_timeAdding}";
        }
        var disabled = _timeAdding == string.Empty || _playerCKey == string.Empty || _currentJob == null;
        PlaytimeAdd.Disabled = disabled;
        PlaytimeAddOverall.Disabled = disabled;
        PlaytimeAddDepartment.Disabled = disabled;
    }
}
